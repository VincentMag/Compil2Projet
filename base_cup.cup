// Specification JCup
import java_cup.runtime.*;
import java.util.*;
import java.io.*;
 
parser code {:

	public static void main(String args[]) throws Exception {
		new parser(new Yylex(new InputStreamReader(System.in))).parse();
	}
/*
	public void syntax_error(Symbol cur_token) { 
		// n'interrompt pas la compil... 
		// on est par defaut dans l'etat error qui permet ensuite la recup
		// par défaut : report_error("syntax error", null);
		report_error("Syntaxe incorrecte <"+tokenToString(cur_token)+">", null);        
	}

	public void report_error(String message, Object info) {   
		// n'interrompt pas la compil
		if (info == null) System.err.println("Mon erreur <"+ ptext()+ "> ligne "+ pline() + ", colonne " + pcolumn() + " : " + message);
		else System.err.println("Mon erreur <"+ptext()+ "> ligne "+ pline() + ", colonne " + pcolumn() + " : " +message+" : "+info);
		System.err.println("-> mais on continue l'analyse... ");
	}

	public void unrecovered_syntax_error(Symbol cur_token) {
    	// par defaut : report_fatal_error("Couldn't repair and continue parse", null);
		// on n'a pas reussi a faire de la recup
		report_fatal_error("Recuperation impossible <"+tokenToString(cur_token)+">", null);   // interrompt la compil     
	}

	public void report_fatal_error(String message, Object info) {  
		// qd cette fct est appelee, message vaut par defaut "Couldn't repair and continue parse"
		String m = "Mon erreur fatale <"+ ptext()+ "> ligne " + pline() + ", colonne " + pcolumn() + " : " + message;
		if (info == null) System.err.println(m);
		else System.err.println(m+" : "+info);
		System.err.println("-> arrêt de l'analyse...");
		done_parsing(); // interrompt la compil
  	}

	public int pline(){
		return ((Yylex)getScanner()).getYyLine();
	}
	public int pcolumn(){
		return ((Yylex)getScanner()).getYyColumn();
	}
	public String ptext(){
		return ((Yylex)getScanner()).getYyText();
	}


public String tokenToString (Symbol token) {
// qqs exemples pour voir...
     switch (token.sym) {
	case sym.SI : return "SI"; 
	case sym.CHAINE : return "CHAINE "+token.value;  
	case sym.ENTIER : return "ENTIER "+token.value;  
	//  ... A compléter !!
	default : return "Token imprévu ou error";
	}
}*/

:}



action code {:

void exemple_de_fonction(String i1, String i2)
{
	String m = "Erreur syntaxique <"+i2+"> au lieu de <"+i1+">";
	if (!(i1.equals(i2))) parser.report_error(m,null);	 
}

:}

terminal ENTIER, IDENT, ARGVIDE, POINT, VIRG, EGAL, DOUBLEGAL, DEUXPOINTS, PTVIRGULE, PAROUVRE, PARFERME, ACCOUVRE, ACCFERME, NOMVAR, APDECLAECLAIRAGE, APDECLAVOLET, APDECLACHAUFFAGE, APDECLAFENETRE, APDECLAALARME, APDECLAAUTRE, APDECLAENSEMBLE, INDECLAINTERRUPTEUR, INDECLAMOBILE, INDECLATELEPHONE, INDECLATABLETTE, INDECLATELECOMMANDE, FORALL, DO, DONE, IF, THEN, ELSE, ENDIF, PRINT, EXESCENARIO, COMASSOC, COMPROG, BALISEOUVRANTE, COMMENT, BALISEFERMANTE, FINBALISE, BALISEINIT, BALISEINTERFACE, BALISEAPPAREIL, BALISESCENARII, BALISESCENARIO, TEXT, BALISECOMMANDE;

non terminal prog, liste, elt ;
/* 
prog	::= lcomment PROG ....   FINPROG {: System.out.println("FINPROG "+parser.pline()+","+parser.pcolumn()); :} ;


dec	::= VAR PT {: System.out.println("décla ok"+ " ligne "+ parser.pline()); :}
	| error {: System.out.println("Récupération erreur syntaxique au niveau de la déclaration - déclaration non traitée"); :};
*/
prog ::= liste | ;
liste ::= elt liste | elt ;
elt ::= ENTIER:e {: System.out.println("Entier : "+e); :}
    | VIRG {: System.out.println("Virgule"); :}
    | POINT {: System.out.println("Point"); :}
    | ARGVIDE {: System.out.println("_"); :}
    | EGAL {: System.out.println("égal"); :}
    | DOUBLEGAL {: System.out.println("Double égal"); :}
    | DEUXPOINTS {: System.out.println("deux points"); :} 
    | PTVIRGULE {: System.out.println("point virgule"); :}
    | PAROUVRE {: System.out.println("parenthèse ouvrante"); :}
    | PARFERME {: System.out.println("parenthèse fermante"); :}
    | ACCOUVRE {: System.out.println("accolade ouvrante"); :}
    | ACCFERME {: System.out.println("accolade fermante"); :}
    | NOMVAR:n {: System.out.println("Nom de variable : "+n); :}
    | APDECLAECLAIRAGE {: System.out.println("déclaration d'appareil(s) éclairage"); :}
    | APDECLAVOLET {: System.out.println("déclaration d'appareil(s) volet"); :}
    | APDECLACHAUFFAGE {: System.out.println("déclaration d'appareil(s) chauffage"); :}
    | APDECLAFENETRE {: System.out.println("déclaration d'appareil(s) fenetre"); :}
    | APDECLAALARME {: System.out.println("déclaration d'appareil(s) alarme"); :}
    | APDECLAAUTRE:n {: System.out.println("déclaration d'appareil(s) autre : "+n); :}
    | APDECLAENSEMBLE {: System.out.println("déclaration d'ensemble d'appareils"); :} 
    | INDECLAINTERRUPTEUR {: System.out.println("déclaration d'interface(s) interrupteur"); :}
    | INDECLAMOBILE {: System.out.println("déclaration d'interface(s) mobile"); :}
    | INDECLATELEPHONE {: System.out.println("déclaration d'interface(s) telephone"); :}
    | INDECLATABLETTE {: System.out.println("déclaration d'interface(s) tablette"); :}
    | INDECLATELECOMMANDE {: System.out.println("déclaration d'interface(s) télécommande"); :}
    | FORALL {: System.out.println("pourtout"); :}
    | DO {: System.out.println("faire"); :}
    | DONE {: System.out.println("fait"); :}
    | IF {: System.out.println("si"); :}
    | THEN {: System.out.println("alors"); :}
    | ELSE {: System.out.println("sinon"); :}
    | ENDIF {: System.out.println("fsi"); :}
    | PRINT:n {: System.out.println("print : "+n); :}
    | EXESCENARIO:n {: System.out.println(" "+n); :}
    | COMASSOC {: System.out.println("déclaration de commande associer"); :}
    | COMPROG {: System.out.println("déclaration de commande programmer"); :}
    | BALISEOUVRANTE {: System.out.println("Nouvelle balise"); :}
    | BALISEFERMANTE {: System.out.println("Fin de balise"); :}
    | FINBALISE {: System.out.println("fermeture balise"); :}
    | BALISEINIT {: System.out.println("Balise initiale"); :}
    | BALISEINTERFACE {: System.out.println("Balise Interface"); :}
    | BALISEAPPAREIL {: System.out.println("Balise Appareils"); :}
    | BALISESCENARII {: System.out.println("Balise Scenarii"); :}
    | BALISESCENARIO:n {: System.out.println("Balise "+n); :}
    | BALISECOMMANDE {: System.out.println("Balise Commandes"); :}
    | TEXT:n {: System.out.println("autre : "+n); :}
    | COMMENT:n {: System.out.println("Commentaire : "+n); :};
